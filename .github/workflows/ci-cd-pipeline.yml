#ci-cd-pipeline.yml
name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow on push to 'main'
  pull_request:
    branches:
      - main  # Trigger workflow on pull requests to 'main'

jobs:
  test-and-secure:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the job

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3 # This action checks out the repository's code


      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4 # This action sets up Python on the runner
        with:
          python-version: '3.10'  # Use Python version 3.10

      # Step 3: Install dependencies
      # Upgrade pip to the latest version
      # Install dependencies from the requirements.txt file
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      # Step 4: Run Django tests
      - name: Run Django tests # Run the Django tests to verify code integrity
        run: |
          python manage.py test 

      # Step 5: Run Bandit (OWASP SAST check)
 #     - name: Run Bandit security check
  #      run: |
   #       pip install bandit
    #      bandit -r . -f html -o j:\bandit-report.html
#
 #     - name: Upload Bandit Report
  #      uses: actions/upload-artifact@v3
   ##     with:
     #     name: bandit-report
      #    path: bandit-report.html
#
      # Step 6: Run OWASP Dependency-Check
 #     - name: Install OWASP Dependency-Check
  #      run: |
   #       curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v7.4.0/dependency-check-7.4.0-release.zip
    #      unzip dependency-check.zip -d owasp-dc
     #     chmod +x owasp-dc/dependency-check/bin/dependency-check.sh
#
 #     - name: Run Dependency-Check
  #      run: |
   #       ./owasp-dc/dependency-check/bin/dependency-check.sh \
    #      --project DjangoApp \
     #     --scan ./ \
      #    --format HTML \
       #   --out ./dependency-check-report

  #    - name: Upload Dependency-Check Report
   #     uses: actions/upload-artifact@v3
    #    with:
     #     name: dependency-check-report
      #    path: ./dependency-check-report

      # Step 7: Notify Render for Deployment (if tests pass)
      - name: Deploy to Render
        if: success()  # Only deploy if the tests were successful
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -d '{}' \
          https://api.render.com/deploy/srv-rnd_oAkmvEXKQDfMz0jq1c1gR6bFNLD2
